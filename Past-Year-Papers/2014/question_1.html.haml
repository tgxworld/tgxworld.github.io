!!!
%html
  %head
    %meta{charset: "utf-8"}
    %meta{ name: 'viewport', content: 'width=device-width, initial-scale=1.0' }
    %script{src: "../../d3.min.js"}
    %script{src: "../../nv.d3/nv.d3.min.js"}
    %script{src: "../../jquery-2.1.1.min.js"}
    %script{src: "../../foundation-5.3.0/js/foundation.min.js"}
    %script{src: "../../foundation-5.3.0/js/vendor/modernizr.js"}
    %script{src: "../../jquery-ui-1.11.1/jquery-ui.min.js"}
    %script{src: "../../jquery.ui.touch-punch.min.js"}
    %link{href: "../../jquery-ui-1.11.1/jquery-ui.min.css", rel: "stylesheet", type: "text/css"}
    %link{href: "../../nv.d3/nv.d3.min.css", rel: "stylesheet", type: "text/css"}
    %link{href: "../../foundation-5.3.0/css/foundation.min.css", rel: "stylesheet", type: "text/css"}

    :css
      body {
        height: 800px;
        margin: auto;
      }

      #chart svg {
        height: 600px;
      }

      #range-slider {
        margin-bottom: 1em;
      }

      #range-input {
        display: inline;
      }

      #range-input-value {
        display: inline-block;
      }

      table {
        table-layout: fixed;
        width: 100%;
      }

      .row {
        margin: 0 !important;
        max-width: 100% !important;
      }

      table tr td, table tr th {
        padding: 0.2rem;
        font-size: 0.6rem;
      }

      input, .postfix, .prefix {
        font-size: 0.6rem !important;
        margin-bottom: 0 !important;
        height: 1.125rem !important;
        padding: 0 0.2rem !important;
        line-height: 1.125rem !important;
      }

      @media only screen {
        .header {
          font-weight: bold;
          font-size: 1em;
        }
      }

      /* For iPhone */
      @media only screen
      and (min-device-width : 320px)
      and (max-device-width : 640px) {
        #chart svg {
          height: 250px;
        }
      }

      /* Samsung Tab Devices */
      @media only screen
      and (min-device-width : 960px)
      and (max-device-width : 970px) {
        #chart svg {
          height: 450px;
        }
      }

    :javascript
      jQuery(function($) {
        function calculateVariableCostofLabour(labourCost, labourOverhead, productionRate) {
          return (labourCost * (100 + labourOverhead) / 100 / productionRate);
        }

        function calculateUniformAnnualCost(machineCost, maintenanceCost, salvageValue, rateOfReturn, serviceLife) {
          var capitalReturnFactor = calculateCapitalReturnFactor(rateOfReturn, serviceLife).toFixed(5);
          var sinkingFundFactor = calculatorSinkingFundFactor(rateOfReturn, serviceLife).toFixed(5);
          return ((machineCost * capitalReturnFactor) + maintenanceCost - (salvageValue * sinkingFundFactor));
        }

        function calculateUniformAnnualCostWithMachineOverhead(uniformAnnualCost, machineOverheadRate) {
          machineOverheadRate = machineOverheadRate / 100;
          return (uniformAnnualCost * (1 + machineOverheadRate));
        }

        function calculateCapitalReturnFactor(rateOfReturn, serviceLife) {
          rateOfReturn = rateOfReturn * 0.01;
          return ((rateOfReturn * Math.pow((rateOfReturn + 1), serviceLife)) / (Math.pow((rateOfReturn + 1), serviceLife) - 1));
        }

        function calculateLabourCostPerUnit(labourRate, productionRate) {
          return (labourRate / productionRate);
        }

        function calculateVariableCost(labourCost, materialCost) {
          return (labourCost + materialCost);
        }

        function calculateVariableCostOvertime(labourCost, materialCost, labourOvertimeRate) {
          return ((labourCost * (1 + (labourOvertimeRate / 100))) + materialCost);
        }

        function calculateElecricityRate(electricityConsumption, powerConsumption, productionRate) {
          return (electricityConsumption * powerConsumption / productionRate);
        }

        function calculateOvertimeCost(cost, variableCostWithOverhead, variableCostOvertimeWithOverhead, productionRate, projectedSales, maximumProductionCapcity) {
          var currentSales = productionRate * 8 * 5 * 50;
          var salesDifference = projectedSales - currentSales;
          projectedSales = (projectedSales >= maximumProductionCapcity) ? maximumProductionCapcity : projectedSales;
1
          if (!drawOvertime || salesDifference < 0) {
            var variableCost = variableCostWithOverhead * projectedSales
          } else {
            var variableCost = (variableCostWithOverhead * currentSales) + (variableCostOvertimeWithOverhead * salesDifference);
          }

          return variableCost + cost;
        }

        function calculateRentPerAnnum(monthlyRent, factorySpace) {
          return (monthlyRent * 12 * factorySpace);
        }

        function calculatorSinkingFundFactor(rateOfReturn, serviceLife) {
          rateOfReturn = rateOfReturn * 0.01;
          return (rateOfReturn/(Math.pow((1 + rateOfReturn), serviceLife) - 1));
        }

        function calculateRevenue(revenue, numberOfUnits) {
          return (revenue * numberOfUnits);
        }

        function calculateCost(cost, variableCost, number_of_units) {
          return Number((cost + (variableCost * number_of_units)).toFixed(2));
        }

        function roundUp(x){
          var y = Math.pow(10, parseInt(x).toString().length - 1);
          x = (x / y);
          x = Math.ceil(x);
          x = x * y;
          return x;
        }

        var lowerBound = 0;
        var upperBound = 0;
        var upperBoundMax = 0;
        var slider;
        var $slider = $('#range-slider');
        var drawOvertime = false;

        var ProfitBreakEvenGraph = {
          _init: function() {
            var widget = this;

            nv.addGraph(function() {
              var chart = nv.models.lineChart()
                .margin({left: 80, right: 40})  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(false)
                .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)        //Show the y-axis
                .showXAxis(true)        //Show the x-axis
              ;

              chart.xAxis     //Chart x-axis settings
                .axisLabel("Annual Output (units)")

              chart.yAxis     //Chart y-axis settings
                .axisLabel('Cost / Revenue ($)')

              /* Done setting the chart up? Time to render it!*/
              var myData = widget._generateLineData(false);

              d3.select('#chart svg')    //Select the <svg> element you want to render the chart in.
                .datum(myData)         //Populate the <svg> element with chart data...
                .call(chart);          //Finally, render the chart!

              //Update the chart when window resizes.
              nv.utils.windowResize(function() { chart.update() });

              d3.select('.draw-overtime').on('click', function() {
                drawOvertime = !drawOvertime;

                if (drawOvertime) {
                  d3.select(this).text('Remove Overtime');
                  d3.select(this).attr('class', 'alert button radius tiny draw-overtime');
                  d3.select('.a-profit-header').text('Method A Profit Based on Projected Sales With Overtime');
                  d3.select('.b-profit-header').text('Method B Profit Based on Projected Sales With Overtime');
                } else {
                  d3.select(this).text('Draw Overtime');
                  d3.select(this).attr('class', 'success button radius tiny draw-overtime');
                  d3.select('.a-profit-header').text('Method A Profit Based on Projected Sales');
                  d3.select('.b-profit-header').text('Method B Profit Based on Projected Sales');
                }

                widget._updateChart(chart, false)
              });

              d3.selectAll('input').each(function() {
                d3.select(this).on('input', function() {
                  widget._updateChart(chart, false);
                  $rangeInputValue.text(lowerBound + '-' + upperBound);
                })
              });

              $rangeInputValue = $('#range-input-value');

              slider = $slider.slider({
                range: true,
                min: lowerBound,
                max: upperBoundMax,
                values: [lowerBound, upperBound],
                slide: function(event, ui) {
                  lowerBound = ui.values[0];
                  upperBound = ui.values[1];

                  widget._updateChart(chart, true);

                  $rangeInputValue.text(lowerBound + '-' + upperBound);
                }
              });
              $rangeInputValue.text(lowerBound + '-' + upperBound);

              return chart;
            });
          },

          _updateChart: function(chart, isSlider) {
            var myData = this._generateLineData(isSlider);

            d3.select('#chart svg')
              .datum(myData)
              .call(chart)
          },

          _generateLineData: function(isSlider) {
            var labourOvertimeRate = parseFloat(d3.select('input[name=labour_overtime_rate]').property('value'));
            var projectedSales = parseFloat(d3.select('input[name=projected_sales]').property('value'));
            // Method A Start
            var aMachineCost = parseFloat(d3.select('input[name=a_machine_cost]').property('value'));
            var aMaintenanceCost = parseFloat(d3.select('input[name=a_maintenance_cost]').property('value'));
            var aSalvageValue = parseFloat(d3.select('input[name=a_salvage_value]').property('value'));
            var aServiceLife = parseFloat(d3.select('input[name=a_service_life]').property('value'));
            var aLabourCost = parseFloat(d3.select('input[name=a_labour_cost]').property('value'));
            var aProductionRate = parseFloat(d3.select('input[name=a_production_rate]').property('value'));
            var aFactorySpace = parseFloat(d3.select('input[name=a_factory_space]').property('value'));
            var aMonthlyRent = parseFloat(d3.select('input[name=a_monthly_rent]').property('value'));
            var aUtilityConsumptionPerMonth = parseFloat(d3.select('input[name=a_utility_consumption]').property('value'));
            var aMaximumProductionCapacity = parseFloat(d3.select('input[name=a_maximum_production_capacity]').property('value'));
            var aRawMaterialCost = parseFloat(d3.select('input[name=a_raw_material_cost]').property('value'));
            var aRevenue = parseFloat(d3.select('input[name=a_revenue]').property('value'));
            var aInterestRate = parseFloat(d3.select('input[name=a_interest_rate]').property('value'));

            var aUniformAnnualCost = calculateUniformAnnualCost(aMachineCost, aMaintenanceCost, aSalvageValue, aInterestRate, aServiceLife);
            var aLabourCostPerUnit = calculateLabourCostPerUnit(aLabourCost, aProductionRate);
            var aRentPerAnnum = calculateRentPerAnnum(aMonthlyRent, aFactorySpace);
            var aUtilityConsumptionPerAnnum = aUtilityConsumptionPerMonth * 12;
            var aTotalCost = aUniformAnnualCost + aRentPerAnnum + aUtilityConsumptionPerAnnum;
            var aVariableCost = calculateVariableCost(aLabourCostPerUnit, aRawMaterialCost);
            var aVariableCostOvertime = calculateVariableCostOvertime(aLabourCostPerUnit, aRawMaterialCost, labourOvertimeRate);
            var aMaximumProductionCapacityPerAnnum = aMaximumProductionCapacity * 12;
            // Method A End

            // Grab field values of Method B
            var bMachineCost = parseFloat(d3.select('input[name=b_machine_cost]').property('value'));
            var bMaintenanceCost = parseFloat(d3.select('input[name=b_maintenance_cost]').property('value'));
            var bSalvageValue = parseFloat(d3.select('input[name=b_salvage_value]').property('value'));
            var bServiceLife = parseFloat(d3.select('input[name=b_service_life]').property('value'));
            var bLabourCost = parseFloat(d3.select('input[name=b_labour_cost]').property('value'));
            var bProductionRate = parseFloat(d3.select('input[name=b_production_rate]').property('value'));
            var bFactorySpace = parseFloat(d3.select('input[name=b_factory_space]').property('value'));
            var bMonthlyRent = parseFloat(d3.select('input[name=b_monthly_rent]').property('value'));
            var bUtilityConsumptionPerMonth = parseFloat(d3.select('input[name=b_utility_consumption]').property('value'));
            var bMaximumProductionCapacity = parseFloat(d3.select('input[name=b_maximum_production_capacity]').property('value'));
            var bRawMaterialCost = parseFloat(d3.select('input[name=b_raw_material_cost]').property('value'));
            var bRevenue = parseFloat(d3.select('input[name=b_revenue]').property('value'));
            var bInterestRate = parseFloat(d3.select('input[name=b_interest_rate]').property('value'));

            var bUniformAnnualCost = calculateUniformAnnualCost(bMachineCost, bMaintenanceCost, bSalvageValue, bInterestRate, bServiceLife);
            var bLabourCostPerUnit = calculateLabourCostPerUnit(bLabourCost, bProductionRate);
            var bRentPerAnnum = calculateRentPerAnnum(bMonthlyRent, bFactorySpace);
            var bUtilityConsumptionPerAnnum = bUtilityConsumptionPerMonth * 12;
            var bTotalCost = bUniformAnnualCost + bRentPerAnnum + bUtilityConsumptionPerAnnum;
            var bVariableCost = calculateVariableCost(bLabourCostPerUnit, bRawMaterialCost);
            var bVariableCostOvertime = calculateVariableCostOvertime(bLabourCostPerUnit, bRawMaterialCost, labourOvertimeRate);
            var bMaximumProductionCapacityPerAnnum = bMaximumProductionCapacity * 12;
            // Method B end

            var breakEvenPoints = [];

            var aBreakEven = this._setMethodABreakEvenValue(aRevenue, aVariableCost, aTotalCost);

            if (aBreakEven > 0) { breakEvenPoints.push(aBreakEven); }

            var bBreakEven = this._setMethodBBreakEvenValue(bRevenue, bVariableCost, bTotalCost);

            if (bBreakEven > 0) { breakEvenPoints.push(bBreakEven); }

            this._setMethodAProfit(
              projectedSales,
              aMaximumProductionCapacityPerAnnum,
              aRevenue,
              calculateOvertimeCost(aTotalCost,
                aVariableCost, aVariableCostOvertime,
                aProductionRate, projectedSales, aMaximumProductionCapacityPerAnnum
              )
            );

            this._setMethodBProfit(
              projectedSales,
              bMaximumProductionCapacityPerAnnum,
              bRevenue,
              calculateOvertimeCost(bTotalCost,
                bVariableCost, bVariableCostOvertime,
                bProductionRate, projectedSales, bMaximumProductionCapacityPerAnnum
              )
            );

            var cBreakEven = this._setMethodABBreakEvenValue(
              aVariableCost, aTotalCost,
              bVariableCost, bTotalCost
            );
            breakEvenPoints.push(cBreakEven);

            var aCurrentSales = aProductionRate * 8 * 5 *50;
            var bCurrentSales = bProductionRate * 8 * 5 *50;

            if (drawOvertime) {
              breakEvenPoints.push(aCurrentSales);
              breakEvenPoints.push(bCurrentSales);
            }

            var aRevenueData = [];
            var bRevenueData = [];
            var aCostData = [];
            var aCostDataWithOvertime = [];
            var bCostData = [];
            var bCostDataWithOvertime = [];

            var unitsMax = roundUp(Math.max.apply(null, breakEvenPoints));

            var maxProductionCapacity = ( aMaximumProductionCapacityPerAnnum >= bMaximumProductionCapacityPerAnnum) ? aMaximumProductionCapacityPerAnnum : bMaximumProductionCapacityPerAnnum;

            unitsMax = (maxProductionCapacity <= unitsMax) ? maxProductionCapacity : unitsMax;
            upperBoundMax = unitsMax;

            if (isSlider) {
              unitsMax = upperBound;
            } else {
              upperBound = unitsMax;
            }

            if (slider != null) {
              $slider.slider('option', 'max', upperBoundMax);
              if (!isSlider) { $slider.slider('option', 'values', [lowerBound, unitsMax]); }
            }

            if (!drawOvertime) {
              [lowerBound, unitsMax].forEach(function(element) {
                var aCostPointWithOvertime = calculateCost(aTotalCost, aVariableCost, element);
                aCostDataWithOvertime.push({ x: element, y: aCostPointWithOvertime });

                var aCostPoint = calculateCost(aTotalCost, aVariableCost, element);
                aCostData.push({ x: element, y: aCostPoint });
              });
            } else {
              var lowerElement = (lowerBound > aCurrentSales) ? lowerBound : aCurrentSales;

              [lowerBound, aCurrentSales].forEach(function(element) {
                var aCostPoint = calculateCost(aTotalCost, aVariableCost, element);
                aCostData.push({ x: element, y: aCostPoint });
              });

              if (aCurrentSales < unitsMax) {
                [lowerElement, unitsMax].forEach(function(element) {
                  var aCostPointWithOvertime = calculateOvertimeCost(aTotalCost,
                    aVariableCost, aVariableCostOvertime,
                    aProductionRate, element
                  );

                  aCostDataWithOvertime.push({ x: element, y: aCostPointWithOvertime });
                });
              }
            }

            if (!drawOvertime) {
              [lowerBound, unitsMax].forEach(function(element) {
                var bCostPointWithOvertime = calculateCost(bTotalCost, bVariableCost, element);
                bCostDataWithOvertime.push({ x: element, y: bCostPointWithOvertime });

                var bCostPoint = calculateCost(bTotalCost, bVariableCost, element);
                bCostData.push({ x: element, y: bCostPoint });
              });
            } else {
              var lowerElement = (lowerBound > bCurrentSales) ? lowerBound : bCurrentSales;

              [lowerBound, bCurrentSales].forEach(function(element) {
                var bCostPoint = calculateCost(bTotalCost, bVariableCost, element);
                bCostData.push({ x: element, y: bCostPoint });
              });

              if (bCurrentSales < unitsMax) {
                [lowerElement, unitsMax].forEach(function(element) {
                  var bCostPointWithOvertime = calculateOvertimeCost(bTotalCost,
                    bVariableCost, bVariableCostOvertime,
                    bProductionRate, element
                  );

                  bCostDataWithOvertime.push({ x: element, y: bCostPointWithOvertime });
                });
              }
            }

            [lowerBound, unitsMax].forEach(function(element) {
              var aRevenuePoint = calculateRevenue(aRevenue, element);
              var bRevenuePoint = calculateRevenue(bRevenue, element);

              aRevenueData.push({ x: element, y: aRevenuePoint });
              bRevenueData.push({ x: element, y: bRevenuePoint });
            });

            results = [
              {
                values: aRevenueData,
                key: 'Production Machine A Revenue',
                color: '#ff7f0e'
              },
              {
                values: bRevenueData,
                key: 'Production Machine B Revenue',
                color: '#03d10c'
              },
              {
                values: aCostData,
                key: 'Production Machine A Cost',
                color: '#3333FF'
              },
              {
                values: bCostData,
                key: 'Production Machine B Cost',
                color: '#CC0000'
              }
            ];

            if (drawOvertime) {
              results.push(
                {
                  values: aCostDataWithOvertime,
                  key: 'Production Machine A Cost With Overtime',
                  color: '#3333FF'
                },
                {
                  values: bCostDataWithOvertime,
                  key: 'Production Machine B Cost With Overtime',
                  color: '#CC0000'
                }
              )
            }

            return results;
          },

          _setMethodABreakEvenValue: function(revenue, variableCost, totalCost) {
            var units = (totalCost / (revenue - variableCost));
            d3.select('input[name=a_cost_break_even]').property('value', units.toFixed(2));
            return units;
          },

          _setMethodBBreakEvenValue: function(revenue, variableCost, totalCost) {
            var units = (totalCost / (revenue - variableCost));
            d3.select('input[name=b_cost_break_even]').property('value', units.toFixed(2));
            return units;
          },

          _setMethodAProfit: function(projectedSales, maximumProductionCapcity, revenue, cost) {
            projectedSales = (projectedSales >= maximumProductionCapcity) ? maximumProductionCapcity : projectedSales;
            d3.select('input[name=a_profit]').property('value', ((projectedSales * revenue) - cost).toFixed(2));
          },

          _setMethodBProfit: function(projectedSales, maximumProductionCapcity, revenue, cost) {
            projectedSales = (projectedSales >= maximumProductionCapcity) ? maximumProductionCapcity : projectedSales;
            d3.select('input[name=b_profit]').property('value', ((projectedSales * revenue) - cost).toFixed(2));
          },

          _setMethodABBreakEvenValue: function(aVariableCost, aTotalCost, bVariableCost, bTotalCost) {
            var units = (aTotalCost - bTotalCost) / (bVariableCost - aVariableCost);
            d3.select('input[name=a_b_cost_break_even]').property('value', units.toFixed(2));
            return units;
          },
        }

        $.widget('custom.profitBreakEvenGraph', ProfitBreakEvenGraph);
        $("[data-graph='profit_break_even']").profitBreakEvenGraph();

        $('.reset-graph').click(function() {
          location.reload();
        })
      });

  %body
    .large-12.columns
      .text-center
        %h3.header
          ME4262 Finals 2014 Question 1

      .large-7.columns
        .row
          #chart{ data: { graph: 'profit_break_even' } }
            %svg

        .row.text-center
          #range-input
            X-Axis Range:
            #range-input-value

          #range-slider

        .row.text-center
          %a.button.radius.tiny.success.draw-overtime Draw overtime
          %a.button.radius.tiny.reset-graph Reset graph

      .large-5.columns
        %table
          %tr
            %th
            %th Manufacturing Setup A
            %th Manufacturing Setup B

          %tr
            %td Machine Cost

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-10.columns
                  %input{ type: 'text', name: 'a_machine_cost', value: 700000 }
            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-10.columns
                  %input{ type: 'text', name: 'b_machine_cost', value: 950000 }

          %tr
            %td Maintenance Cost

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_maintenance_cost', value: 40000 }
                .small-4.columns
                  %span.postfix
                    \/yr

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_maintenance_cost', value: 50000 }
                .small-4.columns
                  %span.postfix
                    \/yr

          %tr
            %td Salvage Value

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-10.columns
                  %input{ type: 'text', name: 'a_salvage_value', value: 100000 }

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-10.columns
                  %input{ type: 'text', name: 'b_salvage_value', value: 150000 }

          %tr
            %td Service Life

            %td
              .row.collapse
                .small-7.columns
                  %input{ type: 'text', name: 'a_service_life', value: 5 }
                .small-5.columns
                  %span.postfix
                    years

            %td
              .row.collapse
                .small-7.columns
                  %input{ type: 'text', name: 'b_service_life', value: 5 }
                .small-5.columns
                  %span.postfix
                    years

          %tr
            %td Labour Cost

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_labour_cost', value: 45 }
                .small-4.columns
                  %span.postfix
                    \/hr

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_labour_cost', value: 45 }
                .small-4.columns
                  %span.postfix
                    \/hr

          %tr
            %td Production Rate

            %td
              .row.collapse
                .small-6.columns
                  %input{ type: 'text', name: 'a_production_rate', value: 75 }
                .small-6.columns
                  %span.postfix
                    units/hr

            %td
              .row.collapse
                .small-6.columns
                  %input{ type: 'text', name: 'b_production_rate', value: 100 }
                .small-6.columns
                  %span.postfix
                    units/hr

          %tr
            %td Factory Space

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'a_factory_space', value: 200 }
                .small-4.columns
                  %span.postfix
                    sq m

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'b_factory_space', value: 200 }
                .small-4.columns
                  %span.postfix
                    sq m

          %tr
            %td Monthly Rent

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_monthly_rent', value: 30 }
                .small-4.columns
                  %span.postfix
                    \/sq m

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_monthly_rent', value: 30 }
                .small-4.columns
                  %span.postfix
                    \/sq m

          %tr
            %td Utility Consumption

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_utility_consumption', value: 2500 }
                .small-4.columns
                  %span.postfix
                    \/mth

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_utility_consumption', value: 2800 }
                .small-4.columns
                  %span.postfix
                    \/mth

          %tr
            %td Maximum Production Capacity

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'a_maximum_production_capacity', value: 20000 }
                .small-4.columns
                  %span.postfix
                    units

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'b_maximum_production_capacity', value: 25000 }
                .small-4.columns
                  %span.postfix
                    units

          %tr
            %td Raw Material Cost

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_raw_material_cost', value: 0.7 }
                .small-4.columns
                  %span.postfix
                    \/unit

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_raw_material_cost', value: 0.7 }
                .small-4.columns
                  %span.postfix
                    \/unit

          %tr
            %td Revenue

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_revenue', value: 3 }
                .small-4.columns
                  %span.postfix
                    \/unit

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_revenue', value: 3 }
                .small-4.columns
                  %span.postfix
                    \/unit

          %tr
            %td Interest Rate

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'a_interest_rate', value: 6 }
                .small-4.columns
                  %span.postfix
                    \%

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'b_interest_rate', value: 6 }
                .small-4.columns
                  %span.postfix
                    \%

          %tr
            %td Labour Over Time Rate

            %td{ colspan: 2 }
              .small-8.small-centered.columns
                .row.collapse
                  .small-8.columns
                    %input{ type: 'text', name: 'labour_overtime_rate', value: 50 }
                  .small-4.columns
                    %span.postfix
                      \%


          %tr
            %td Projected Sale

            %td{ colspan: 2 }
              .small-8.small-centered.columns
                .row.collapse
                  .small-8.columns
                    %input{ type: 'text', name: 'projected_sales', value: 180000 }
                  .small-4.columns
                    %span.postfix
                      units

        %table
          %tr
            %td Method A Cost Break Even Point

            %td{ colspan: 2 }
              .small-10.small-centered.columns
                .row.collapse
                  .small-8.columns
                    %input{ type: 'text', name: 'a_cost_break_even', disabled: '' }
                  .small-4.columns
                    %span.postfix
                      units

          %tr
            %td Method B Cost Break Even Point

            %td{ colspan: 2 }
              .small-10.small-centered.columns
                .row.collapse
                  .small-8.columns
                    %input{ type: 'text', name: 'b_cost_break_even', disabled: '' }
                  .small-4.columns
                    %span.postfix
                      units

          %tr
            %td.a-profit-header Method A Profit Based on Projected Sales

            %td{ colspan: 2 }
              .small-10.small-centered.columns
                .row.collapse
                  .small-4.columns
                    %span.prefix
                      $
                  .small-8.columns
                    %input{ type: 'text', name: 'a_profit', disabled: '' }

          %tr
            %td.b-profit-header Method B Profit Based on Projected Sales

            %td{ colspan: 2 }
              .small-10.small-centered.columns
                .row.collapse
                  .small-4.columns
                    %span.prefix
                      $
                  .small-8.columns
                    %input{ type: 'text', name: 'b_profit', disabled: '' }

          %tr
            %td Method A/B Cost Break Even Point

            %td{ colspan: 2 }
              .small-10.small-centered.columns
                .row.collapse
                  .small-8.columns
                    %input{ type: 'text', name: 'a_b_cost_break_even', disabled: '' }
                  .small-4.columns
                    %span.postfix
                      units
