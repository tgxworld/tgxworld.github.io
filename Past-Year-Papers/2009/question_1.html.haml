!!!
%html
  %head
    %meta{charset: "utf-8"}
    %meta{ name: 'viewport', content: 'width=device-width, initial-scale=1.0' }
    %script{src: "../../d3.min.js"}
    %script{src: "../../nv.d3/nv.d3.min.js"}
    %script{src: "../../jquery-2.1.1.min.js"}
    %script{src: "../../foundation-5.3.0/js/foundation.min.js"}
    %script{src: "../../foundation-5.3.0/js/vendor/modernizr.js"}
    %script{src: "../../jquery-ui-1.11.1/jquery-ui.min.js"}
    %script{src: "../../jquery.ui.touch-punch.min.js"}
    %link{href: "../../jquery-ui-1.11.1/jquery-ui.min.css", rel: "stylesheet", type: "text/css"}
    %link{href: "../../nv.d3/nv.d3.min.css", rel: "stylesheet", type: "text/css"}
    %link{href: "../../foundation-5.3.0/css/foundation.min.css", rel: "stylesheet", type: "text/css"}

    :css
      body {
        height: 800px;
        margin: auto;
      }

      #chart svg {
        height: 600px;
      }

      #range-slider {
        margin-bottom: 1em;
      }

      #range-input {
        display: inline;
      }

      #range-input-value {
        display: inline-block;
      }

      table {
        table-layout: fixed;
        width: 100%;
      }

      .row {
        margin: 0 !important;
        max-width: 100% !important;
      }

      table tr td, table tr th {
        padding: 0.2rem;
        font-size: 0.6rem;
      }

      input, .postfix, .prefix {
        font-size: 0.6rem !important;
        margin-bottom: 0 !important;
        height: 1.125rem !important;
        padding: 0 0.2rem !important;
        line-height: 1.125rem !important;
      }

      @media only screen {
        .header {
          font-weight: bold;
          font-size: 1em;
        }
      }

      /* For iPhone */
      @media only screen
      and (min-device-width : 320px)
      and (max-device-width : 640px) {
        #chart svg {
          height: 250px;
        }
      }

      /* Samsung Tab Devices */
      @media only screen
      and (min-device-width : 960px)
      and (max-device-width : 970px) {
        #chart svg {
          height: 450px;
        }
      }

    :javascript
      jQuery(function($) {
        function calculateVariableCostofLabour(labourCost, labourOverhead, productionRate) {
          return (labourCost * (100 + labourOverhead) / 100 / productionRate);
        }

        function calculateUniformAnnualCost(machineCost, maintenanceCost, salvageValue, rateOfReturn, serviceLife) {
          var capital_return_factor = capitalReturnFactor(rateOfReturn, serviceLife);
          var sinking_fund_factor = sinkingFundFactor(rateOfReturn, serviceLife);
          return ((machineCost * capital_return_factor) + maintenanceCost - (salvageValue * sinking_fund_factor));
        }

        function calculateUniformAnnualCostWithMachineOverhead(uniformAnnualCost, machineOverheadRate) {
          machineOverheadRate = machineOverheadRate / 100;
          return (uniformAnnualCost * (1 + machineOverheadRate));
        }

        function capitalReturnFactor(rateOfReturn, serviceLife) {
          rateOfReturn = rateOfReturn * 0.01;
          return ((rateOfReturn * Math.pow((rateOfReturn + 1), serviceLife)) / (Math.pow((rateOfReturn + 1), serviceLife) - 1));
        }

        function calculateLabourCostPerUnit(labourRate, productionRate) {
          return (labourRate / productionRate);
        }

        function calculateRentPerAnnum(monthlyRent, factorySpace) {
          return (monthlyRent * 12 * factorySpace);
        }

        function calculateUtilityPerAnnum(utilityConsumption) {
          return utilityConsumption * 12;
        }

        function sinkingFundFactor(rateOfReturn, serviceLife) {
          rateOfReturn = rateOfReturn * 0.01;
          return (rateOfReturn/(Math.pow((1 + rateOfReturn), serviceLife) - 1));
        }

        function calculateRevenue(revenue, numberOfUnits) {
          return (revenue * numberOfUnits);
        }

        function calculateCost(uniformAnnualCost, rentPerAnnum, utilityPerAnnum, labourCostPerUnit, rawMaterialCost, unitsScale) {
          return (uniformAnnualCost + rentPerAnnum + utilityPerAnnum + ((labourCostPerUnit + rawMaterialCost) * unitsScale)).toFixed(2);
        }

        function roundUp(x){
          var y = Math.pow(10, parseInt(x).toString().length - 1);
          x = (x / y);
          x = Math.ceil(x);
          x = x * y;
          return x;
        }

        var lowerBound = 0;
        var upperBound = 0;
        var upperBoundMax = 0;
        var slider;
        var $slider = $('#range-slider');

        var ProfitBreakEvenGraph = {
          _init: function() {
            var widget = this;

            nv.addGraph(function() {
              var chart = nv.models.lineChart()
                .margin({left: 80, right: 40})  //Adjust chart margins to give the x-axis some breathing room.
                .useInteractiveGuideline(false)
                .showLegend(true)       //Show the legend, allowing users to turn on/off line series.
                .showYAxis(true)        //Show the y-axis
                .showXAxis(true)        //Show the x-axis
              ;

              chart.xAxis     //Chart x-axis settings
                .axisLabel("Annual Output")

              chart.yAxis     //Chart y-axis settings
                .axisLabel('Cost / Revenue')

              /* Done setting the chart up? Time to render it!*/
              var myData = widget._generateLineData(false);

              d3.select('#chart svg')    //Select the <svg> element you want to render the chart in.
                .datum(myData)         //Populate the <svg> element with chart data...
                .call(chart);          //Finally, render the chart!

              //Update the chart when window resizes.
              nv.utils.windowResize(function() { chart.update() });

              d3.selectAll('input').each(function() {
                d3.select(this).on('input', function() {
                  widget._updateChart(chart, false);
                  $rangeInputValue.text(lowerBound + '-' + upperBound);
                })
              });

              $rangeInputValue = $('#range-input-value');

              slider = $slider.slider({
                range: true,
                min: lowerBound,
                max: upperBoundMax,
                values: [lowerBound, upperBound],
                slide: function(event, ui) {
                  lowerBound = ui.values[0];
                  upperBound = ui.values[1];

                  widget._updateChart(chart, true);

                  $rangeInputValue.text(lowerBound + '-' + upperBound);
                }
              });
              $rangeInputValue.text(lowerBound + '-' + upperBound);

              return chart;
            });
          },

          _updateChart: function(chart, isSlider) {
            var myData = this._generateLineData(isSlider);

            d3.select('#chart svg')
              .datum(myData)
              .call(chart)
          },

          _generateLineData: function(isSlider) {
            // Method A Start
            var aMachineCost = parseFloat(d3.select('input[name=a_machine_cost]').property('value'));
            var aMaintenanceCost = parseFloat(d3.select('input[name=a_maintenance_cost]').property('value'));
            var aSalvageValue = parseFloat(d3.select('input[name=a_salvage_value]').property('value'));
            var aServiceLife = parseFloat(d3.select('input[name=a_service_life]').property('value'));
            var aLabourCost = parseFloat(d3.select('input[name=a_labour_cost]').property('value'));
            var aProductionRate = parseFloat(d3.select('input[name=a_production_rate]').property('value'));
            var aFactorySpace = parseFloat(d3.select('input[name=a_factory_space]').property('value'));
            var aMonthlyRent = parseFloat(d3.select('input[name=a_monthly_rent]').property('value'));
            var aUtilityConsumption = parseFloat(d3.select('input[name=a_utility_consumption]').property('value'));
            var aMaximumProductionCapacity = parseFloat(d3.select('input[name=a_maximum_production_capacity]').property('value'));
            var aRawMaterialCost = parseFloat(d3.select('input[name=a_raw_material_cost]').property('value'));
            var aRevenue = parseFloat(d3.select('input[name=a_revenue]').property('value'));
            var aInterestRate = parseFloat(d3.select('input[name=a_interest_rate]').property('value'));

            var aUniformAnnualCost = calculateUniformAnnualCost(aMachineCost, aMaintenanceCost, aSalvageValue, aInterestRate, aServiceLife);
            var aLabourCostPerUnit = calculateLabourCostPerUnit(aLabourCost, aProductionRate);
            var aRentPerAnnum = calculateRentPerAnnum(aMonthlyRent, aFactorySpace);
            var aUtilityPerAnnum = calculateUtilityPerAnnum(aUtilityConsumption);
            // Method A End

            // Grab field values of Method B
            var bMachineCost = parseFloat(d3.select('input[name=b_machine_cost]').property('value'));
            var bMaintenanceCost = parseFloat(d3.select('input[name=b_maintenance_cost]').property('value'));
            var bSalvageValue = parseFloat(d3.select('input[name=b_salvage_value]').property('value'));
            var bServiceLife = parseFloat(d3.select('input[name=b_service_life]').property('value'));
            var bLabourCost = parseFloat(d3.select('input[name=b_labour_cost]').property('value'));
            var bProductionRate = parseFloat(d3.select('input[name=b_production_rate]').property('value'));
            var bFactorySpace = parseFloat(d3.select('input[name=b_factory_space]').property('value'));
            var bMonthlyRent = parseFloat(d3.select('input[name=b_monthly_rent]').property('value'));
            var bUtilityConsumption = parseFloat(d3.select('input[name=b_utility_consumption]').property('value'));
            var bMaximumProductionCapacity = parseFloat(d3.select('input[name=b_maximum_production_capacity]').property('value'));
            var bRawMaterialCost = parseFloat(d3.select('input[name=b_raw_material_cost]').property('value'));
            var bRevenue = parseFloat(d3.select('input[name=b_revenue]').property('value'));
            var bInterestRate = parseFloat(d3.select('input[name=b_interest_rate]').property('value'));

            var bUniformAnnualCost = calculateUniformAnnualCost(bMachineCost, bMaintenanceCost, bSalvageValue, bInterestRate, bServiceLife);
            var bLabourCostPerUnit = calculateLabourCostPerUnit(bLabourCost, bProductionRate);
            var bRentPerAnnum = calculateRentPerAnnum(bMonthlyRent, bFactorySpace);
            var bUtilityPerAnnum = calculateUtilityPerAnnum(bUtilityConsumption);
            // Method B end

            var aBreakEven = this._setMethodABreakEvenValue(aRevenue , aUniformAnnualCost, aRentPerAnnum, aUtilityPerAnnum, aLabourCostPerUnit, aRawMaterialCost);
            var bBreakEven = this._setMethodBBreakEvenValue(bRevenue , bUniformAnnualCost, bRentPerAnnum, bUtilityPerAnnum, bLabourCostPerUnit, bRawMaterialCost);
            var cBreakEven = this._setMethodBreakEvenValue(aUniformAnnualCost, aRentPerAnnum, aUtilityPerAnnum, aLabourCostPerUnit, aRawMaterialCost, bUniformAnnualCost, bRentPerAnnum, bUtilityPerAnnum, bLabourCostPerUnit, bRawMaterialCost);

            var aRevenueData = [];
            var bRevenueData = [];
            var aCostData = [];
            var bCostData = [];

            var unitsMax = roundUp(Math.max(aBreakEven, bBreakEven, cBreakEven));
            upperBoundMax = unitsMax;

            if (isSlider) {
              unitsMax = upperBound;
            } else {
              upperBound = unitsMax;
            }

            if (slider != null) {
              $slider.slider('option', 'max', upperBoundMax);
              if (!isSlider) { $slider.slider('option', 'values', [lowerBound, unitsMax]); }
            }

            [lowerBound, unitsMax].forEach(function(element) {
              var aRevenuePoint = calculateRevenue(aRevenue, element);
              var bRevenuePoint = calculateRevenue(bRevenue, element);
              var aCostPoint = calculateCost(aUniformAnnualCost, aRentPerAnnum, aUtilityPerAnnum, aLabourCostPerUnit, aRawMaterialCost, element)
              var bCostPoint = calculateCost(bUniformAnnualCost, bRentPerAnnum, bUtilityPerAnnum, bLabourCostPerUnit, bRawMaterialCost, element)

              aRevenueData.push({ x: element, y: aRevenuePoint });
              bRevenueData.push({ x: element, y: bRevenuePoint });
              aCostData.push({ x: element, y: aCostPoint });
              bCostData.push({ x: element, y: bCostPoint });
            });

            return [
              {
                values: aRevenueData,
                key: 'Method A Revenue',
                color: '#ff7f0e'
              },
              {
                values: bRevenueData,
                key: 'Method B Revenue',
                color: '#03d10c'
              },
              {
                values: aCostData,
                key: 'Method A Cost',
                color: '#8b0000'
              },
              {
                values: bCostData,
                key: 'Method B Cost',
                color: '#8c766f'
              }
            ];
          },

          _setMethodABreakEvenValue: function(revenue , uniformAnnualCost, rentPerAnnum, utilityPerAnnum, labourCost, rawMaterialCost) {
            var units = ((uniformAnnualCost + rentPerAnnum + utilityPerAnnum) / (revenue - labourCost - rawMaterialCost));
            d3.select('input[name=a_cost_break_even]').property('value', units.toFixed(2));
            return units;
          },

          _setMethodBBreakEvenValue: function(revenue , uniformAnnualCost, rentPerAnnum, utilityPerAnnum, labourCost, rawMaterialCost) {
            var units = ((uniformAnnualCost + rentPerAnnum + utilityPerAnnum) / (revenue - labourCost - rawMaterialCost));
            d3.select('input[name=b_cost_break_even]').property('value', units.toFixed(2));
            return units;
          },

          _setMethodBreakEvenValue: function(aUniformAnnualCost, aRentPerAnnum, aUtilityPerAnnum, aLabourCost, aRawMaterialCost, bUniformAnnualCost, bRentPerAnnum, bUtilityPerAnnum, bLabourCost, bRawMaterialCost) {
            var units = (((aUniformAnnualCost + aRentPerAnnum + aUtilityPerAnnum) - (bUniformAnnualCost + bRentPerAnnum + bUtilityPerAnnum)) / ((bLabourCost + bRawMaterialCost) - (aLabourCost + aRawMaterialCost)));
            d3.select('input[name=a_b_cost_break_even]').property('value', units.toFixed(2));
            return units;
          }
        }

        $.widget('custom.profitBreakEvenGraph', ProfitBreakEvenGraph);
        $("[data-graph='profit_break_even']").profitBreakEvenGraph();
      });

  %body
    .large-12.columns
      .text-center
        %h1
          ME4262 Finals 2009 Question 1

      .large-7.columns
        .row
          #chart{ data: { graph: 'profit_break_even' } }
            %svg

        .row.text-center
          #range-input
            X-Axis Range:
            #range-input-value

          #range-slider

      .large-5.columns
        %table
          %tr
            %th
            %th Production Setup A
            %th Production Setup B

          %tr
            %td Machine + Integrated material handling system

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-10.columns
                  %input{ type: 'text', name: 'a_machine_cost', value: 500000 }

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-10.columns
                  %input{ type: 'text', name: 'b_machine_cost', value: 650000 }


          %tr
            %td Maintenance Cost

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_maintenance_cost', value: 30000 }
                .small-4.columns
                  %span.postfix
                    \/yr
            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_maintenance_cost', value: 30000 }
                .small-4.columns
                  %span.postfix
                    \/yr

          %tr
            %td Salvage value

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-10.columns
                  %input{ type: 'text', name: 'a_salvage_value', value: 80000 }

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-10.columns
                  %input{ type: 'text', name: 'b_salvage_value', value: 100000 }


          %tr
            %td Service Life

            %td
              .row.collapse
                .small-7.columns
                  %input{ type: 'text', name: 'a_service_life', value: 5 }
                .small-5.columns
                  %span.postfix
                    years

            %td
              .row.collapse
                .small-7.columns
                  %input{ type: 'text', name: 'b_service_life', value: 5 }
                .small-5.columns
                  %span.postfix
                    years

          %tr
            %td Labour Cost

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_labour_cost', value: 30 }
                .small-4.columns
                  %span.postfix
                    \/hr

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_labour_cost', value: 30 }
                .small-4.columns
                  %span.postfix
                    \/hr

          %tr
            %td Production Rate

            %td
              .row.collapse
                .small-7.columns
                  %input{ type: 'text', name: 'a_production_rate', value: 50 }
                .small-5.columns
                  %span.postfix
                    units/hr

            %td
              .row.collapse
                .small-7.columns
                  %input{ type: 'text', name: 'b_production_rate', value: 75 }
                .small-5.columns
                  %span.postfix
                    units/hr

          %tr
            %td Factory Space Needed

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'a_factory_space', value: 180 }
                .small-4.columns
                  %span.postfix
                    sq m

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'b_factory_space', value: 180 }
                .small-4.columns
                  %span.postfix
                    sq m

          %tr
            %td Monthly Rent

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_monthly_rent', value: 20 }
                .small-4.columns
                  %span.postfix
                    \/sq m

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_monthly_rent', value: 20 }
                .small-4.columns
                  %span.postfix
                    \/sq m

          %tr
            %td Estimated Utility Consumption

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_utility_consumption', value: 2000 }
                .small-4.columns
                  %span.postfix
                    \/mth

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_utility_consumption', value: 2000 }
                .small-4.columns
                  %span.postfix
                    \/mth

          %tr
            %td Maximum Production Capacity

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'a_maximum_production_capacity', value: 20000 }
                .small-4.columns
                  %span.postfix
                    units

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'b_maximum_production_capacity', value: 22000 }
                .small-4.columns
                  %span.postfix
                    units

          %tr
            %td Raw Material Cost

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_raw_material_cost', value: 0.5 }
                .small-4.columns
                  %span.postfix
                    \/unit

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_raw_material_cost', value: 0.5 }
                .small-4.columns
                  %span.postfix
                    \/unit

          %tr
            %td Revenue

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'a_revenue', value: 2.50 }
                .small-4.columns
                  %span.postfix
                    \/unit

            %td
              .row.collapse
                .small-2.columns
                  %span.prefix
                    $
                .small-6.columns
                  %input{ type: 'text', name: 'b_revenue', value: 2.50 }
                .small-4.columns
                  %span.postfix
                    \/unit

          %tr
            %td Interest rate

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'a_interest_rate', value: 6 }
                .small-4.columns
                  %span.postfix
                    \%

            %td
              .row.collapse
                .small-8.columns
                  %input{ type: 'text', name: 'b_interest_rate', value: 6 }
                .small-4.columns
                  %span.postfix
                    \%

        %table
          %tr
            %td Method A Cost Break Even Point

            %td{ colspan: 2 }
              .small-10.small-centered.columns
                .row.collapse
                  .small-8.columns
                    %input{ type: 'text', name: 'a_cost_break_even', disabled: '' }
                  .small-4.columns
                    %span.postfix
                      units

          %tr
            %td Method B Cost Break Even Point

            %td{ colspan: 2 }
              .small-10.small-centered.columns
                .row.collapse
                  .small-8.columns
                    %input{ type: 'text', name: 'b_cost_break_even', disabled: '' }
                  .small-4.columns
                    %span.postfix
                      units

          %tr
            %td Method A/B Cost Break Even Point

            %td{ colspan: 2 }
              .small-10.small-centered.columns
                .row.collapse
                  .small-8.columns
                    %input{ type: 'text', name: 'a_b_cost_break_even', disabled: '' }
                  .small-4.columns
                    %span.postfix
                      units
